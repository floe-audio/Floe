// Copyright 2025 Sam Windell
// SPDX-License-Identifier: GPL-3.0-or-later

#pragma once

#include <IconsFontAwesome6.h>

#include "foundation/foundation.hpp"

enum class TagCategory : u8 {
    SoundSource,
    RealInstrument,
    NumberOfPlayers,
    SoundTypeLong,
    SoundTypeShort,
    SoundTypeSequence,
    SoundTypeRole,
    Material,
    ReverbType,
    MoodPositive,
    MoodNegative,
    MoodMixed,
    MoodThematic,
    Pitch,
    TimbreModulation,
    TimbreRealTone,
    TimbreSynthTechnique,
    TimbreFrequency,
    Genre,
    Count,
};

enum class TagType : u16 {
    Acoustic,
    FieldRecording,
    FoundSounds,
    Hybrid,
    Synthesized,
    Vocal,

    ElectricBass,
    DoubleBass,
    Brass,
    Cello,
    Choir,
    Drums,
    Folk,
    Guitar,
    Keyboard,
    Organ,
    Percussion,
    Piano,
    PluckedStrings,
    Strings,
    StruckStrings,
    Violin,
    Wind,
    TonalPercussion,

    Solo,
    Ensemble,

    Wood,
    MetalMaterial,
    Glass,
    Plastic,
    Rubber,
    Stone,
    Ice,

    SmallRoom,
    LargeRoom,
    Chamber,
    Studio,
    Hall,
    Church,
    Cathedral,
    Unusual,
    OpenAir,

    Bright,
    Dreamy,
    Ethereal,
    Hopeful,
    Nostalgic,
    Peaceful,
    Playful,

    Aggressive,
    Chaotic,
    Dark,
    Disturbing,
    Eerie,
    Melancholic,
    Menacing,
    Tense,

    Bittersweet,
    Hypnotic,
    Mysterious,
    Quirky,
    Subdued,

    Dramatic,
    Dystopian,
    Epic,
    Experimental,
    Fantasy,
    Heroic,
    Noir,
    Romantic,
    Thriller,
    Horror,
    SciFi,
    Western,

    MultiPitched,
    NonPitched,
    Dissonant,

    Pad,
    Texture,
    Soundscape,
    Underscore,
    Noise,

    Hit,
    Keys,
    Oneshot,
    Pluck,
    Stab,

    Arp,
    Sequence,
    Loop,

    Lead,
    Bass,
    Riser,
    Downer,
    SoundFx,
    Transition,

    Pulsing,
    Evolving,
    Glitched,
    Grainy,

    Brassy,
    Breathy,
    StringsLike,
    Reedy,
    ChoirLike,
    OrganLike,
    Percussive,

    Analog,
    Fm,
    Granular,
    PhysicalModelling,

    Airy,
    CircuitBent,
    Cold,
    Digital,
    Distorted,
    FullSpectrum,
    Fuzzy,
    Glassy,
    Gritty,
    Harsh,
    Hissing,
    LoFi,
    Lush,
    Metallic,
    Muddy,
    Muffled,
    Nasal,
    Noisy,
    Pure,
    Resonant,
    Rumbly,
    Saturated,
    Smooth,
    Thin,
    Warm,

    Eighties,
    EDM,
    IDM,
    Ambient,
    Blues,
    Chillout,
    Chiptune,
    Cinematic,
    Disco,
    Downtempo,
    DrumAndBass,
    Dubstep,
    Electronic,
    FolkGenre,
    Funk,
    FutureBass,
    Glitch,
    HipHop,
    House,
    Industrial,
    Jazz,
    MetalGenre,
    Orchestral,
    Pop,
    Rock,
    Synthwave,
    Techno,
    Trance,
    Trap,
    Vaporwave,
    World,

    Count,
};

struct TagCategoryInfo {
    String name;
    String question;
    String recommendation;
    Span<TagType const> tags;
    String emoji;
    String font_awesome_icon;
    Span<TagCategory const> exclude_categories;
    Span<TagType const> exclude_tags;
};

struct TagInfo {
    String name;
    String description;
};

struct TagAndCategory {
    TagType tag;
    TagCategory category;
};

PUBLIC constexpr TagInfo GetTagInfo(TagType t) {
    switch (t) {
        case TagType::Acoustic: return {"acoustic"_s, "Originating from a real instrument"_s};
        case TagType::FieldRecording: return {"field recording"_s, "Environmental or location recordings"_s};
        case TagType::FoundSounds:
            return {"found sounds"_s, "Real objects not traditionally used for music"_s};
        case TagType::Hybrid:
            return {"hybrid"_s, "Combines acoustic/vocal sounds with processed/synthesized elements"_s};
        case TagType::Synthesized: return {"synthesized"_s, "Generated by algorithms or circuits"_s};
        case TagType::Vocal: return {"vocal"_s, "Originating from a human voice"_s};

        case TagType::ElectricBass: return {"electric bass"_s, ""_s};
        case TagType::DoubleBass: return {"double bass"_s, ""_s};
        case TagType::Brass: return {"brass"_s, ""_s};
        case TagType::Cello: return {"cello"_s, ""_s};
        case TagType::Choir: return {"choir"_s, ""_s};
        case TagType::Drums: return {"drums"_s, ""_s};
        case TagType::Folk: return {"folk"_s, ""_s};
        case TagType::Guitar: return {"guitar"_s, ""_s};
        case TagType::Keyboard: return {"keyboard"_s, ""_s};
        case TagType::Organ: return {"organ"_s, ""_s};
        case TagType::Percussion: return {"percussion"_s, ""_s};
        case TagType::Piano: return {"piano"_s, ""_s};
        case TagType::PluckedStrings:
            return {"plucked strings"_s, "Plucked strings such as guitar, harp, mandolin"_s};
        case TagType::Strings:
            return {"strings"_s, "Bowed strings such as violin, viola, cello, double bass"_s};
        case TagType::StruckStrings:
            return {"struck strings"_s, "Struck strings such as hammered dulcimer, santur"_s};
        case TagType::Violin: return {"violin"_s, ""_s};
        case TagType::Wind: return {"wind"_s, ""_s};
        case TagType::TonalPercussion: return {"tonal percussion"_s, ""_s};

        case TagType::Solo: return {"solo"_s, "Single player"_s};
        case TagType::Ensemble: return {"ensemble"_s, "Multiple players"_s};

        case TagType::Wood: return {"wood"_s, ""_s};
        case TagType::MetalMaterial: return {"metal"_s, ""_s};
        case TagType::Glass: return {"glass"_s, ""_s};
        case TagType::Plastic: return {"plastic"_s, ""_s};
        case TagType::Rubber: return {"rubber"_s, ""_s};
        case TagType::Stone: return {"stone"_s, ""_s};
        case TagType::Ice: return {"ice"_s, ""_s};

        // Reverb types
        case TagType::SmallRoom: return {"small room"_s, ""_s};
        case TagType::LargeRoom: return {"large room"_s, ""_s};
        case TagType::Chamber: return {"chamber"_s, ""_s};
        case TagType::Studio: return {"studio"_s, ""_s};
        case TagType::Hall: return {"hall"_s, ""_s};
        case TagType::Church: return {"church"_s, ""_s};
        case TagType::Cathedral: return {"cathedral"_s, ""_s};
        case TagType::Unusual: return {"unusual"_s, ""_s};
        case TagType::OpenAir: return {"open air"_s, ""_s};

        // Moods
        case TagType::Bright: return {"bright"_s, "Positive, uplifting, clear"_s};
        case TagType::Dreamy: return {"dreamy"_s, ""_s};
        case TagType::Ethereal: return {"ethereal"_s, ""_s};
        case TagType::Hopeful: return {"hopeful"_s, ""_s};
        case TagType::Nostalgic: return {"nostalgic"_s, ""_s};
        case TagType::Peaceful: return {"peaceful"_s, ""_s};
        case TagType::Playful: return {"playful"_s, ""_s};

        case TagType::Aggressive: return {"aggressive"_s, ""_s};
        case TagType::Chaotic: return {"chaotic"_s, ""_s};
        case TagType::Dark: return {"dark"_s, "Unhappy, dim, unpleasant"_s};
        case TagType::Disturbing: return {"disturbing"_s, ""_s};
        case TagType::Eerie: return {"eerie"_s, ""_s};
        case TagType::Melancholic: return {"melancholic"_s, ""_s};
        case TagType::Menacing: return {"menacing"_s, ""_s};
        case TagType::Tense: return {"tense"_s, ""_s};

        // Mixed moods
        case TagType::Bittersweet: return {"bittersweet"_s, ""_s};
        case TagType::Hypnotic: return {"hypnotic"_s, ""_s};
        case TagType::Mysterious: return {"mysterious"_s, ""_s};
        case TagType::Quirky: return {"quirky"_s, ""_s};
        case TagType::Subdued: return {"subdued"_s, ""_s};

        // Thematic moods
        case TagType::Dramatic: return {"dramatic"_s, ""_s};
        case TagType::Dystopian: return {"dystopian"_s, ""_s};
        case TagType::Epic: return {"epic"_s, ""_s};
        case TagType::Experimental: return {"experimental"_s, ""_s};
        case TagType::Fantasy: return {"fantasy"_s, ""_s};
        case TagType::Heroic: return {"heroic"_s, ""_s};
        case TagType::Noir: return {"noir"_s, ""_s};
        case TagType::Romantic: return {"romantic"_s, ""_s};
        case TagType::Thriller: return {"thriller"_s, ""_s};
        case TagType::Horror: return {"horror"_s, ""_s};
        case TagType::SciFi: return {"sci-fi"_s, ""_s};
        case TagType::Western: return {"western"_s, ""_s};

        // Pitch
        case TagType::MultiPitched: return {"multi-pitched"_s, "Contains multiple distinct notes"_s};
        case TagType::NonPitched: return {"non-pitched"_s, "Lacks identifiable musical pitch"_s};
        case TagType::Dissonant: return {"dissonant"_s, "Contains harmonically clashing pitches"_s};

        // Sound types (long duration)
        case TagType::Pad: return {"pad"_s, "Sustained, pitched background harmonic element"_s};
        case TagType::Texture:
            return {"texture"_s,
                    "Sustained atmospheric element, typically less of a musical pitch than `pad`"_s};
        case TagType::Soundscape: return {"soundscape"_s, "Complex and rich sonic environment"_s};
        case TagType::Underscore:
            return {"underscore"_s, "Background tones or sequences for underneath dialogue"_s};
        case TagType::Noise: return {"noise"_s, "Non-pitched and constant, similar to white noise"_s};

        // Sound types (short duration)
        case TagType::Hit: return {"hit"_s, "Single impactful sound with pitch and percussive elements"_s};
        case TagType::Keys: return {"keys"_s, "Piano or keyboard-like"_s};
        case TagType::Oneshot:
            return {"oneshot"_s, "Non-looping single sound, typically not for playing chromatically"_s};
        case TagType::Pluck: return {"pluck"_s, "Short melodic notes"_s};
        case TagType::Stab: return {"stab"_s, "Extra-short melodic notes"_s};

        // Sound types (sequence or pattern)
        case TagType::Arp: return {"arp"_s, "Arpeggiated pattern of notes"_s};
        case TagType::Sequence: return {"sequence"_s, "Sequenced pattern timbre changes"_s};
        case TagType::Loop: return {"loop"_s, "Sampled repeating phrase"_s};

        // Sound types (role in a track)
        case TagType::Lead: return {"lead"_s, "Foreground melodic element"_s};
        case TagType::Bass: return {"bass"_s, "Low-frequency foundation"_s};
        case TagType::Riser: return {"riser"_s, "Building tension element"_s};
        case TagType::Downer: return {"downer"_s, "Descending tension element"_s};
        case TagType::SoundFx: return {"sound fx"_s, "Special effect sound"_s};
        case TagType::Transition: return {"transition"_s, "Section change element"_s};

        // Timbre modulation
        case TagType::Pulsing: return {"pulsing"_s, "Rhythmic modulation"_s};
        case TagType::Evolving: return {"evolving"_s, "Changing over time"_s};
        case TagType::Glitched: return {"glitched"_s, "Digital error artefacts"_s};
        case TagType::Grainy: return {"grainy"_s, "Fine textural irregularities"_s};

        // Timbre (real instrument tone)
        case TagType::Brassy: return {"brassy"_s, "Like brass instruments"_s};
        case TagType::Breathy: return {"breathy"_s, "Containing air noise, like wind instruments"_s};
        case TagType::StringsLike:
            return {"strings-like"_s, "Characteristic resonance of string instruments"_s};
        case TagType::Reedy: return {"reedy"_s, "Characteristic of reed instruments"_s};
        case TagType::ChoirLike: return {"choir-like"_s, "Characteristic of choral voices"_s};
        case TagType::OrganLike: return {"organ-like"_s, "Characteristic of an organ"_s};
        case TagType::Percussive: return {"percussive"_s, "Short, sharp attack"_s};

        // Timbre (synthesis technique)
        case TagType::Analog: return {"analog"_s, "Warm, imprecise, vintage character"_s};
        case TagType::Fm: return {"FM"_s, "Frequency modulation synthesis"_s};
        case TagType::Granular: return {"granular"_s, "Granular synthesis"_s};
        case TagType::PhysicalModelling: return {"physical modelling"_s, "Simulating real-world physics"_s};

        // Timbre (frequency)
        case TagType::Airy: return {"airy"_s, "Open, spacious, light"_s};
        case TagType::CircuitBent:
            return {"circuit bent"_s, "Characteristic of modified electronic devices"_s};
        case TagType::Cold: return {"cold"_s, "Thin, clinical, lacking warmth"_s};
        case TagType::Digital: return {"digital"_s, "Clean, precise, computer-generated character"_s};
        case TagType::Distorted: return {"distorted"_s, "Overdriven, crushed, non-linear"_s};
        case TagType::FullSpectrum: return {"full-spectrum"_s, "Wide frequency range"_s};
        case TagType::Fuzzy: return {"fuzzy"_s, "Indistinct, soft-edged, unclear"_s};
        case TagType::Hissing: return {"hissing"_s, "Sibilant, white noise"_s};
        case TagType::Glassy: return {"glassy"_s, "Clear, fragile, transparent"_s};
        case TagType::Gritty: return {"gritty"_s, "Rough, textured, unpolished"_s};
        case TagType::Harsh: return {"harsh"_s, "Abrasive, aggressive high frequencies"_s};
        case TagType::LoFi: return {"lo-fi"_s, "Intentionally degraded quality"_s};
        case TagType::Lush: return {"lush"_s, "Full, rich, densely layered"_s};
        case TagType::Metallic: return {"metallic"_s, "Resonant, hard, bright, like metal"_s};
        case TagType::Muddy: return {"muddy"_s, "Unclear low-mid frequencies"_s};
        case TagType::Muffled: return {"muffled"_s, "Dampened high frequencies"_s};
        case TagType::Nasal: return {"nasal"_s, "Strong mid-range resonance"_s};
        case TagType::Noisy:
            return {
                "noisy"_s,
                "Contains noise components, imperfect. If the sound is 100% noise use `noise` instead."_s};
        case TagType::Pure: return {"pure"_s, "Free from noise, clean sine-like quality"_s};
        case TagType::Resonant: return {"resonant"_s, "Strong resonant peaks in frequency"_s};
        case TagType::Rumbly: return {"rumbly"_s, "Low frequency non-pitch sustained noise"_s};
        case TagType::Saturated: return {"saturated"_s, "Subtly distorted, harmonically enhanced"_s};
        case TagType::Smooth: return {"smooth"_s, "Even, consistent, without sharp edges"_s};
        case TagType::Thin: return {"thin"_s, "Lacking in fullness, narrow frequency range"_s};
        case TagType::Warm: return {"warm"_s, "Rich in harmonics, pleasant mid-range"_s};

        // Genres
        case TagType::Eighties: return {"80s"_s, ""_s};
        case TagType::EDM: return {"EDM"_s, ""_s};
        case TagType::IDM: return {"IDM"_s, ""_s};
        case TagType::Ambient: return {"ambient"_s, ""_s};
        case TagType::Blues: return {"blues"_s, ""_s};
        case TagType::Chillout: return {"chillout"_s, ""_s};
        case TagType::Chiptune: return {"chiptune"_s, ""_s};
        case TagType::Cinematic: return {"cinematic"_s, ""_s};
        case TagType::Disco: return {"disco"_s, ""_s};
        case TagType::Downtempo: return {"downtempo"_s, ""_s};
        case TagType::DrumAndBass: return {"drum & bass"_s, ""_s};
        case TagType::Dubstep: return {"dubstep"_s, ""_s};
        case TagType::Electronic: return {"electronic"_s, ""_s};
        case TagType::Funk: return {"funk"_s, ""_s};
        case TagType::FolkGenre: return {"folk (genre)"_s, ""_s};
        case TagType::FutureBass: return {"future bass"_s, ""_s};
        case TagType::Glitch: return {"glitch"_s, ""_s};
        case TagType::HipHop: return {"hip-hop"_s, ""_s};
        case TagType::House: return {"house"_s, ""_s};
        case TagType::Industrial: return {"industrial"_s, ""_s};
        case TagType::Jazz: return {"jazz"_s, ""_s};
        case TagType::Orchestral: return {"orchestral"_s, ""_s};
        case TagType::Pop: return {"pop"_s, ""_s};
        case TagType::MetalGenre: return {"metal (genre)"_s, ""_s};
        case TagType::Rock: return {"rock"_s, ""_s};
        case TagType::Synthwave: return {"synthwave"_s, ""_s};
        case TagType::Techno: return {"techno"_s, ""_s};
        case TagType::Trance: return {"trance"_s, ""_s};
        case TagType::Trap: return {"trap"_s, ""_s};
        case TagType::Vaporwave: return {"vaporwave"_s, ""_s};
        case TagType::World: return {"world"_s, ""_s};

        case TagType::Count: PanicIfReached();
    }
}

PUBLIC constexpr TagCategoryInfo Tags(TagCategory category) {
    using enum TagType;
    static constexpr auto k_sound_type_exclude_categories = Array {
        TagCategory::SoundTypeLong,
        TagCategory::SoundTypeShort,
        TagCategory::SoundTypeSequence,
    };
    switch (category) {
        case TagCategory::SoundSource: {
            static constexpr auto k_tags = Array {
                Acoustic,
                FieldRecording,
                FoundSounds,
                Hybrid,
                Synthesized,
                Vocal,
            };
            return {
                .name = "Sound source",
                .question = "Where did the sound come from?",
                .recommendation =
                    "It's strongly recommended to specify a sound-source for instruments and impulse responses. This is sometimes not applicable for presets.",
                .tags = k_tags,
                .emoji = "🔊",
                .font_awesome_icon = ICON_FA_VOLUME_HIGH,
            };
        }
        case TagCategory::RealInstrument: {
            static constexpr auto k_tags = Array {
                Brass,
                Cello,
                Choir,
                DoubleBass,
                Drums,
                ElectricBass,
                Folk,
                Guitar,
                Keyboard,
                Organ,
                Percussion,
                Piano,
                PluckedStrings,
                Strings,
                StruckStrings,
                TonalPercussion,
                Violin,
                Wind,
            };
            static constexpr auto k_exclude_categories = Array {
                TagCategory::RealInstrument,
            };
            static constexpr auto k_exclude_tags = Array {
                Synthesized,
                Vocal,
                FoundSounds,
                FieldRecording,
            };
            return {
                .name = "Real instrument category",
                .question = "Does it fit in a real instrument category?",
                .recommendation =
                    "These are mostly relevant for acoustic or hybrid sounds, but can be used for synthesized sounds that emulate these instruments.",
                .tags = k_tags,
                .emoji = "🎻",
                .font_awesome_icon = ICON_FA_GUITAR,
                .exclude_categories = k_exclude_categories,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::NumberOfPlayers: {
            static constexpr auto k_tags = Array {
                Solo,
                Ensemble,
            };
            static constexpr auto k_exclude_categories = Array {
                TagCategory::NumberOfPlayers,
            };
            static constexpr auto k_exclude_tags = Array {
                TagType::Synthesized,
                TagType::Vocal,
                TagType::FoundSounds,
                TagType::FieldRecording,
            };
            return {
                .name = "Number of players",
                .question = "How many players are involved?",
                .recommendation =
                    "This is typically used for acoustic sounds. Synthesized sounds usually don't have this tag.",
                .tags = k_tags,
                .emoji = "👥",
                .font_awesome_icon = ICON_FA_USERS,
                .exclude_categories = k_exclude_categories,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::Material: {
            static constexpr auto k_tags = Array {
                Glass,
                Ice,
                MetalMaterial,
                Plastic,
                Rubber,
                Stone,
                Wood,
            };
            static constexpr auto k_exclude_tags = Array {
                Synthesized,
                Vocal,
            };
            return {
                .name = "Material",
                .question = "Is it made from a specific material?",
                .recommendation =
                    "This is typically used for non-standard instruments in the `acoustic` or `found sounds` categories.",
                .tags = k_tags,
                .emoji = "🪵",
                .font_awesome_icon = ICON_FA_TREE,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::ReverbType: {
            static constexpr auto k_tags = Array {
                Cathedral,
                Chamber,
                Church,
                Hall,
                LargeRoom,
                OpenAir,
                SmallRoom,
                Studio,
                Unusual,
            };
            static constexpr auto k_exclude_categories = Array {
                TagCategory::ReverbType,
            };
            return {
                .name = "Reverb type",
                .question = "What reverb type is it?",
                .recommendation =
                    "Strongly recommended for impulse responses. Not applicable for instruments or presets.",
                .tags = k_tags,
                .emoji = "🏛️",
                .font_awesome_icon = ICON_FA_LANDMARK,
                .exclude_categories = k_exclude_categories,
            };
        }
        case TagCategory::MoodPositive: {
            static constexpr auto k_tags = Array {
                Bright,
                Dreamy,
                Ethereal,
                Hopeful,
                Nostalgic,
                Peaceful,
                Playful,
            };
            return {
                .name = "Mood (positive)",
                .question = "What mood does the item evoke?",
                .recommendation =
                    "It's usually recommended to specify moods for synthesised instruments and presets. Not typically used for well-known acoustic instruments.",
                .tags = k_tags,
                .emoji = "🙂",
                .font_awesome_icon = ICON_FA_FACE_SMILE,
            };
        }
        case TagCategory::MoodNegative: {
            static constexpr auto k_tags = Array {
                Aggressive,
                Chaotic,
                Dark,
                Disturbing,
                Eerie,
                Melancholic,
                Menacing,
                Tense,
            };
            return {
                .name = "Mood (negative)",
                .question = "What mood does the item evoke?",
                .recommendation =
                    "It's usually recommended to specify moods for synthesised instruments and presets. Not typically used for well-known acoustic instruments.",
                .tags = k_tags,
                .emoji = "😟",
                .font_awesome_icon = ICON_FA_FACE_FROWN,
            };
        }
        case TagCategory::MoodMixed: {
            static constexpr auto k_tags = Array {
                Bittersweet,
                Hypnotic,
                Mysterious,
                Quirky,
                Subdued,
            };
            return {
                .name = "Mood (mixed)",
                .question = "What mood does the item evoke?",
                .recommendation =
                    "It's usually recommended to specify moods for synthesised instruments and presets. Not typically used for well-known acoustic instruments.",
                .tags = k_tags,
                .emoji = "😐",
                .font_awesome_icon = ICON_FA_FACE_MEH,
            };
        }
        case TagCategory::MoodThematic: {
            static constexpr auto k_tags = Array {
                Dramatic,
                Dystopian,
                Epic,
                Experimental,
                Fantasy,
                Heroic,
                Noir,
                Romantic,
                Thriller,
                Horror,
                SciFi,
                Western,
            };
            return {
                .name = "Mood (thematic)",
                .question = "What mood does the item evoke?",
                .recommendation =
                    "It's usually recommended to specify moods for synthesised instruments and presets. Not typically used for well-known acoustic instruments.",
                .tags = k_tags,
                .emoji = "🎭",
                .font_awesome_icon = ICON_FA_MASKS_THEATER,
            };
        }
        case TagCategory::Pitch: {
            static constexpr auto k_tags = Array {
                MultiPitched,
                NonPitched,
                Dissonant,
            };
            return {
                .name = "Pitch",
                .question = "What are its pitch characteristics?",
                .recommendation =
                    "Useful for non-typical sounds that have notable pitch characteristics. A sound is assumed to possess a musical pitch unless otherwise stated.",
                .tags = k_tags,
                .emoji = "🎶",
                .font_awesome_icon = ICON_FA_MUSIC,
            };
        }
        case TagCategory::SoundTypeLong: {
            static constexpr auto k_tags = Array {
                Pad,
                Texture,
                Soundscape,
                Underscore,
                Noise,
            };
            return {
                .name = "Sound type (long duration)",
                .question = "What type of sound is it?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "➡️",
                .font_awesome_icon = ICON_FA_RIGHT_LONG,
                .exclude_categories = k_sound_type_exclude_categories,
            };
        }
        case TagCategory::SoundTypeShort: {
            static constexpr auto k_tags = Array {
                Hit,
                Keys,
                Oneshot,
                Pluck,
                Stab,
            };
            return {
                .name = "Sound type (short duration)",
                .question = "What type of sound is it?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "↔️",
                .font_awesome_icon = ICON_FA_ARROW_RIGHT,
                .exclude_categories = k_sound_type_exclude_categories,
            };
        }
        case TagCategory::SoundTypeSequence: {
            static constexpr auto k_tags = Array {
                Arp,
                Sequence,
                Loop,
            };
            return {
                .name = "Sound type (sequence or pattern)",
                .question = "What type of sound is it?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "🔁",
                .font_awesome_icon = ICON_FA_REPEAT,
                .exclude_categories = k_sound_type_exclude_categories,
            };
        }
        case TagCategory::SoundTypeRole: {
            static constexpr auto k_tags = Array {
                Lead,
                Bass,
                Riser,
                Downer,
                SoundFx,
                Transition,
            };
            return {
                .name = "Sound type (role in a track)",
                .question = "What type of sound is it?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "🎛️",
                .font_awesome_icon = ICON_FA_LAYER_GROUP,
                .exclude_categories = k_sound_type_exclude_categories,
            };
        }
        case TagCategory::TimbreModulation: {
            static constexpr auto k_tags = Array {
                Pulsing,
                Evolving,
                Glitched,
                Grainy,
            };
            return {
                .name = "Timbre (modulation)",
                .question = "What is its timbre like?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "🚂",
                .font_awesome_icon = ICON_FA_WAVE_SQUARE,
            };
        }
        case TagCategory::TimbreRealTone: {
            static constexpr auto k_tags = Array {
                Brassy,
                Breathy,
                StringsLike,
                Reedy,
                ChoirLike,
                OrganLike,
                Percussive,
            };
            static constexpr auto k_exclude_tags = Array {
                Acoustic,
            };
            return {
                .name = "Timbre (real instrument tone)",
                .question = "What is its timbre like?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "🎷",
                .font_awesome_icon = ICON_FA_DRUM_STEELPAN,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::TimbreSynthTechnique: {
            static constexpr auto k_tags = Array {
                Analog,
                Fm,
                Granular,
                PhysicalModelling,
            };
            static constexpr auto k_exclude_tags = Array {
                Acoustic,
            };
            return {
                .name = "Timbre (synthesis technique)",
                .question = "What is its timbre like?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "🎚️",
                .font_awesome_icon = ICON_FA_SLIDERS,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::TimbreFrequency: {
            static constexpr auto k_tags = Array {
                Airy,  CircuitBent, Cold,   Digital,   Distorted, FullSpectrum, Fuzzy,   Glassy, Gritty,
                Harsh, Hissing,     LoFi,   Lush,      Metallic,  Muddy,        Muffled, Nasal,  Noisy,
                Pure,  Resonant,    Rumbly, Saturated, Smooth,    Thin,         Warm,
            };
            static constexpr auto k_exclude_tags = Array {
                Acoustic,
            };
            return {
                .name = "Timbre (frequency)",
                .question = "What is its timbre like?",
                .recommendation = "",
                .tags = k_tags,
                .emoji = "💎",
                .font_awesome_icon = ICON_FA_GEM,
                .exclude_tags = k_exclude_tags,
            };
        }
        case TagCategory::Genre: {
            static constexpr auto k_tags = Array {
                Eighties, EDM,       IDM,         Ambient,    Blues,      Chillout,  Chiptune,   Cinematic,
                Disco,    Downtempo, DrumAndBass, Dubstep,    Electronic, FolkGenre, Funk,       FutureBass,
                Glitch,   HipHop,    House,       Industrial, Jazz,       LoFi,      MetalGenre, Orchestral,
                Pop,      Rock,      Synthwave,   Techno,     Trance,     Trap,      Vaporwave,  World,
            };
            return {
                .name = "Genre",
                .question = "What genres might this item fit best into?",
                .recommendation =
                    "Specifying at least one genre is recommended for all presets and instruments.",
                .tags = k_tags,
                .emoji = "🎵",
                .font_awesome_icon = ICON_FA_MUSIC,
            };
        }
        case TagCategory::Count: break;
    }
    return {};
}

PUBLIC bool ShouldGreyOutTagCategory(TagCategory category, Bitset<ToInt(TagType::Count)> selected_tags) {
    auto const category_info = Tags(category);
    for (auto const t : EnumIterator<TagType>()) {
        if (selected_tags.Get(ToInt(t))) {
            if (Contains(category_info.exclude_tags, t)) return true;
        }
    }

    for (auto const selected_category : EnumIterator<TagCategory>()) {
        auto const selected_category_info = Tags(selected_category);
        for (auto const selected_tag : selected_category_info.tags) {
            if (selected_tags.Get(ToInt(selected_tag))) {
                if (Contains(selected_category_info.exclude_categories, category)) return true;
            }
        }
    }

    return false;
}

PUBLIC Optional<TagAndCategory> LookupTagName(String name) {
    struct TagLookup {
        struct Element {
            String key {};
            TagAndCategory value {};
            u64 hash {};
        };

        constexpr TagLookup() {
            for (auto const tag_category : EnumIterator<TagCategory>()) {
                auto const category_info = Tags(tag_category);
                for (auto const tag : category_info.tags) {
                    auto const tag_info = GetTagInfo(tag);
                    Insert(tag_info.name, {tag, tag_category});
                }
            }
        }

        constexpr usize Lookup(String name, u64 hash) const {
            auto const k_mask = elements.size - 1;

            usize index = hash;
            usize step = 1;

            while (true) {
                auto const array_index = index & k_mask;
                auto& element = elements[array_index];
                if (element.hash == 0) return array_index; // empty
                if (element.hash == hash && element.key == name) return array_index; // found

                // quadratic probing
                index += step;
                ++step;
            }
        }

        constexpr void Insert(String name, TagAndCategory tag_and_category) {
            auto const hash = Hash(name);
            auto& element = elements[Lookup(name, hash)];
            element.key = name;
            element.value = tag_and_category;
            element.hash = hash;
        }

        constexpr Optional<TagAndCategory> Find(String name) const {
            auto& element = elements[Lookup(name, Hash(name))];
            if (element.hash == 0) return k_nullopt;
            return element.value;
        }

        Array<Element, NextPowerOf2((u32)TagType::Count) * 2> elements;
    };

    constexpr TagLookup k_tag_lookup;
    return k_tag_lookup.Find(name);
}
